name: Real-time Air Quality Predictions

on:
  schedule:
    # Ejecutar cada hora en minuto 15
   # - cron: '15 * * * *'
  workflow_dispatch:
    # Permitir ejecuci√≥n manual
  push:
    branches: [ main ]
    paths:
      - 'R/03_prepare_realtime_prediction.R'
      - 'R/03b_execute_predictions.R'
      - '.github/workflows/realtime-predictions.yml'

env:
  RENV_PATHS_CACHE: ~/.local/share/renv
  R_LIBS_USER: ~/.local/share/renv/library

jobs:
  realtime-predictions:
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup R
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: '4.5.1'
        use-public-rspm: true
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libcurl4-openssl-dev \
          libssl-dev \
          libxml2-dev \
          libgdal-dev \
          libgeos-dev \
          libproj-dev \
          libudunits2-dev \
          libsqlite3-dev \
          libpq-dev \
          libmagick++-dev \
          libfontconfig1-dev \
          libharfbuzz-dev \
          libfribidi-dev
    
    - name: Cache R packages
      uses: actions/cache@v3
      with:
        path: ${{ env.RENV_PATHS_CACHE }}
        key: ${{ runner.os }}-renv-${{ hashFiles('**/renv.lock') }}
        restore-keys: |
          ${{ runner.os }}-renv-
    
    - name: Restore R environment
      shell: Rscript {0}
      run: |
        if (!requireNamespace("renv", quietly = TRUE)) {
          install.packages("renv")
        }
        renv::restore()
    
    - name: Verify required models exist
      run: |
        if [ ! -f "models/ensemble_shiny.rds" ]; then
          echo "Error: Required model files not found"
          echo "Please run Phase 2 modeling scripts first"
          exit 1
        fi
        
    - name: Create output directories
      run: |
        mkdir -p data/realtime
        mkdir -p output/mapas_realtime
        mkdir -p logs
        
    - name: Prepare real-time data
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        AEMET_API_KEY: ${{ secrets.AEMET_API_KEY }}
      shell: Rscript {0}
      run: |
        tryCatch({
          source("R/03_prepare_realtime_prediction.R")
          cat("‚úÖ Preparaci√≥n de datos completada\n")
        }, error = function(e) {
          cat("‚ùå Error en preparaci√≥n de datos:", e$message, "\n")
          quit(status = 1)
        })
        
    - name: Execute predictions
      shell: Rscript {0}
      run: |
        tryCatch({
          source("R/03b_execute_predictions.R")
          cat("‚úÖ Predicciones ejecutadas correctamente\n")
        }, error = function(e) {
          cat("‚ùå Error ejecutando predicciones:", e$message, "\n")
          quit(status = 1)
        })
        
    - name: Validate outputs
      run: |
        echo "üîç Validando archivos de salida..."
        
        if [ -f "data/realtime/datos_prediccion_latest.rds" ]; then
          echo "‚úÖ Datos de predicci√≥n preparados"
        else
          echo "‚ùå Faltan datos de predicci√≥n"
          exit 1
        fi
        
        if [ -f "output/predicciones_realtime_latest.rds" ]; then
          echo "‚úÖ Predicciones generadas"
        else
          echo "‚ùå Faltan predicciones"
          exit 1
        fi
        
        # Contar mapas generados
        MAP_COUNT=$(find output/mapas_realtime -name "*_latest.png" | wc -l)
        echo "üìä Mapas generados: $MAP_COUNT"
        
    - name: Upload prediction results
      uses: actions/upload-artifact@v3
      with:
        name: realtime-predictions-${{ github.run_number }}
        path: |
          output/predicciones_realtime_latest.rds
          output/resumen_predicciones_latest.rds
          output/mapas_realtime/*_latest.png
          data/realtime/metadatos_latest.rds
        retention-days: 7
        
    - name: Upload logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: prediction-logs-${{ github.run_number }}
        path: logs/
        retention-days: 3
        
    - name: Generate summary report
      shell: Rscript {0}
      run: |
        if (file.exists("output/resumen_predicciones_latest.rds")) {
          resumen <- readRDS("output/resumen_predicciones_latest.rds")
          
          cat("\n")
          cat("üìã RESUMEN DE PREDICCIONES\n")
          cat("========================\n")
          cat("üïê Timestamp:", format(resumen$timestamp_generacion), "\n")
          cat("üå°Ô∏è  Fuente meteorol√≥gica:", resumen$fuente_meteorologia, "\n")
          cat("üè≠ Contaminantes procesados:", length(resumen$contaminantes_procesados), "\n")
          
          for (cont in names(resumen$resumen_por_contaminante)) {
            datos <- resumen$resumen_por_contaminante[[cont]]
            cat("  üìä", cont, "- Promedio:", round(datos$estadisticas$valor_medio, 1), 
                "Œºg/m¬≥ (", datos$calidad_aire, ")\n")
          }
          
          cat("\n‚úÖ Ejecuci√≥n completada exitosamente\n")
        } else {
          cat("‚ùå No se pudo generar resumen\n")
        }
        
    - name: Cleanup old artifacts
      run: |
        # Limpiar archivos temporales antiguos si es necesario
        find data/realtime -name "datos_prediccion_*.rds" -type f -mtime +7 -delete 2>/dev/null || true
        find output -name "predicciones_realtime_*.rds" -type f -mtime +7 -delete 2>/dev/null || true
        
  notify-status:
    runs-on: ubuntu-latest
    needs: realtime-predictions
    if: always()
    
    steps:
    - name: Notify completion
      run: |
        if [ "${{ needs.realtime-predictions.result }}" == "success" ]; then
          echo "‚úÖ Pipeline de predicciones ejecutado exitosamente"
          echo "üïê Fecha: $(date)"
          echo "üîó Run: ${{ github.run_id }}"
        else
          echo "‚ùå Pipeline de predicciones fall√≥"
          echo "üîó Ver detalles en: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

        fi
