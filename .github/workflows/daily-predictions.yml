name: Daily Air Quality Predictions

on:
  schedule:
    # Ejecutar diariamente a las 6:00 AM UTC (7:00 AM Madrid)
    - cron: '0 6 * * *'
  workflow_dispatch:  # Permitir ejecuci√≥n manual

env:
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_PORT: ${{ secrets.DB_PORT }}
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  AEMET_API_KEY: ${{ secrets.AEMET_API_KEY }}

jobs:
  daily-predictions:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup R
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: '4.5.1'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libcurl4-openssl-dev \
          libssl-dev \
          libxml2-dev \
          libpq-dev \
          libgdal-dev \
          libproj-dev \
          libgeos-dev \
          libudunits2-dev \
          libarchive-dev \
          cmake \
          pandoc \
          gdal-bin

    - name: Cache R packages
      uses: actions/cache@v4
      with:
        path: ${{ env.R_LIBS_USER }}
        key: ${{ runner.os }}-r-${{ hashFiles('DESCRIPTION', 'renv.lock') }}

    - name: Install R dependencies
      run: |
        R -e "
        # Instalar solo paquetes esenciales para predicciones
        packages <- c(
          'DBI', 'RPostgres', 'caret', 'randomForest', 'sf',
          'dplyr', 'logger', 'httr2', 'jsonlite', 'lubridate',
          'data.table', 'shiny', 'leaflet', 'plotly', 'ggplot2',
          'rsconnect', 'shinydashboard', 'DT', 'htmltools',
          'shinycssloaders', 'tidyr', 'viridis', 'yaml',
          'ggrepel', 'purrr', 'tidyterra', 'mapSpain',
          'gganimate', 'transformr', 'slippymath'
        )

        for(pkg in packages) {
          if (!requireNamespace(pkg, quietly = TRUE)) {
            install.packages(pkg)
            cat('‚úÖ Instalado:', pkg, '\n')
          } else {
            cat('‚ö° Ya disponible:', pkg, '\n')
          }
        }

        cat('‚úÖ Dependencias esenciales instaladas\n')
        "

    - name: Download latest trained model
      run: |
        # Limpiar modelos existentes y descargar el m√°s reciente
        rm -f models/modelos_caret_avanzados*.rds
        gh release download --pattern "modelos_caret_avanzados*.rds" --dir models/ || echo "No model found, skipping download"

        # Verificar que el modelo existe
        if [ ! -f models/modelos_caret_avanzados.rds ]; then
          echo "Error: No se pudo descargar el modelo"
          exit 1
        fi

        echo "‚úÖ Modelo descargado correctamente"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Collect real-time data
      run: |
        # Crear directorios antes de ejecutar scripts
        mkdir -p data/realtime logs
        Rscript R/meteo_forecast.R || echo "AEMET forecast failed, continuing..."
        Rscript -e "
        source('R/datos_realtime_fallback.R', local = TRUE)
        datos_actuales <- obtener_datos_tiempo_real(usar_fallback = TRUE)
        saveRDS(datos_actuales, 'data/realtime/datos_prediccion_latest.rds')
        cat('‚úÖ Datos actuales preparados\n')
        "
      continue-on-error: true

    - name: Generate predictions
      run: |
        # Crear directorios necesarios
        mkdir -p output data/realtime logs
        Rscript R/05_predicciones_horarias.R

    - name: Log predictions for retrospective analysis
      run: |
        Rscript -e "
        # Logging b√°sico sin conexi√≥n a BD (por ahora)
        if (file.exists('output/predicciones_40h_latest.rds')) {
          predicciones <- readRDS('output/predicciones_40h_latest.rds')
          cat('‚úÖ Predicciones cargadas:', nrow(predicciones), 'registros\n')

          # Generar resumen b√°sico
          resumen <- list(
            timestamp = Sys.time(),
            total_predicciones = nrow(predicciones),
            estaciones = length(unique(predicciones\$id_estacion)),
            contaminantes = length(unique(predicciones\$contaminante)),
            rango_valores = range(predicciones\$prediccion, na.rm = TRUE)
          )

          # Guardar resumen
          saveRDS(resumen, 'output/resumen_predicciones_latest.rds')
          cat('üìä Resumen de predicciones generado\n')
        } else {
          cat('‚ùå No se encontraron predicciones para logging\n')
        }
        "
      continue-on-error: true

    - name: Update cloud database
      run: |
        # Verificar conexi√≥n a BD cloud (opcional)
        Rscript -e "
        tryCatch({
          library(DBI)
          library(RPostgres)

          # Conectar a BD cloud
          con <- dbConnect(RPostgres::Postgres(),
            host = Sys.getenv('DB_HOST'),
            port = as.integer(Sys.getenv('DB_PORT')),
            dbname = Sys.getenv('DB_NAME'),
            user = Sys.getenv('DB_USER'),
            password = Sys.getenv('DB_PASSWORD')
          )

          cat('‚úÖ Conexi√≥n a cloud database exitosa\n')
          cat('üìä Tablas disponibles:', length(DBI::dbListTables(con)), '\n')

          DBI::dbDisconnect(con)
        }, error = function(e) {
          cat('‚ö†Ô∏è No se pudo conectar a cloud database:', e\$message, '\n')
          cat('üí° Continuando sin actualizaci√≥n de BD...\n')
        })
        "
      continue-on-error: true

    - name: Generate dashboard data
      run: |
        # Crear todos los directorios que podr√≠an necesitarse
        mkdir -p app/www/mapas_horas app/www/horas app/www/logos output data/realtime logs models

        # Generar mapas e im√°genes para el dashboard
        Rscript generar_mapas_por_hora.R || echo "Map generation failed, continuing..."
        Rscript generar_imagenes_por_hora.R || echo "Image generation failed, continuing..."

        # Verificar archivos generados
        Rscript -e "
        # Verificar predicciones y archivos dashboard
        if (file.exists('output/predicciones_40h_latest.rds')) {
          cat('‚úÖ Predicciones generadas correctamente\n')
        } else {
          cat('‚ùå Error: No se generaron predicciones\n')
        }

        # Verificar algunas im√°genes clave
        imagenes_test <- c(
          'app/www/mapas_horas/mapa_no2_hora_01.png',
          'app/www/horas/no2_hora_01.png'
        )

        for(img in imagenes_test) {
          if(file.exists(img)) {
            cat('‚úÖ', img, 'generada\n')
          } else {
            cat('‚ö†Ô∏è', img, 'no encontrada\n')
          }
        }
        "

    - name: Upload prediction artifacts
      uses: actions/upload-artifact@v4
      with:
        name: daily-predictions-${{ github.run_number }}
        path: |
          output/predicciones_*.rds
          output/performance_report_*.rds
          output/mapas_realtime/
          data/realtime/
        retention-days: 7

    - name: Deploy to shinyapps.io
      run: |
        # Configurar credenciales de shinyapps.io
        Rscript -e "
        if (!requireNamespace('rsconnect', quietly = TRUE)) {
          install.packages('rsconnect')
        }

        library(rsconnect)

        # Configurar cuenta
        setAccountInfo(
          name = '${{ secrets.SHINYAPPS_NAME }}',
          token = '${{ secrets.SHINYAPPS_TOKEN }}',
          secret = '${{ secrets.SHINYAPPS_SECRET }}'
        )

        # Preparar archivos para deployment
        if (!dir.exists('deploy_temp')) dir.create('deploy_temp')

        # Copiar archivos de la app
        file.copy('app/', 'deploy_temp/', recursive = TRUE)
        file.copy('R/', 'deploy_temp/', recursive = TRUE)

        # Copiar datos de predicci√≥n m√°s recientes
        if (!dir.exists('deploy_temp/data')) dir.create('deploy_temp/data')

        if (file.exists('output/predicciones_40h_latest.rds')) {
          file.copy('output/predicciones_40h_latest.rds', 'deploy_temp/data/')
        }

        if (file.exists('output/meteo_40h_latest.rds')) {
          file.copy('output/meteo_40h_latest.rds', 'deploy_temp/data/')
        }

        # Crear archivo de configuraci√≥n de BD para la app
        writeLines(
          paste0(
            'DB_HOST=\"${{ secrets.DB_HOST }}\"\n',
            'DB_PORT=\"${{ secrets.DB_PORT }}\"\n',
            'DB_NAME=\"${{ secrets.DB_NAME }}\"\n',
            'DB_USER=\"${{ secrets.DB_USER }}\"\n',
            'DB_PASSWORD=\"${{ secrets.DB_PASSWORD }}\"'
          ),
          'deploy_temp/.Renviron'
        )

        cat('‚úÖ Archivos preparados para deployment\n')

        # Deploy a shinyapps.io
        deployApp(
          appDir = 'deploy_temp/app',
          appName = 'madrid-air-quality',
          account = '${{ secrets.SHINYAPPS_NAME }}',
          forceUpdate = TRUE
        )

        cat('üöÄ App desplegada exitosamente en shinyapps.io\n')
        cat('üîó URL: https://${{ secrets.SHINYAPPS_NAME }}.shinyapps.io/madrid-air-quality/\n')
        "

    - name: Clean up deployment files
      run: |
        rm -rf deploy_temp
        echo "üßπ Archivos temporales limpiados"

    - name: Notification on failure
      if: failure()
      run: |
        echo "‚ùå Error en predicciones diarias"
        echo "üîç Revisar logs para diagnosticar el problema"
        # Aqu√≠ puedes agregar notificaciones por email/Slack si es necesario